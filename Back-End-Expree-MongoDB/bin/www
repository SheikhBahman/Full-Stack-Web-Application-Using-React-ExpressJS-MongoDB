#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('bahmanserver:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
app.set('secPort', port + 443);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var options = {
    key: fs.readFileSync(__dirname + '/private.key'),
    cert: fs.readFileSync(__dirname + '/certificate.pem')
};

var secureServer = https.createServer(options, app);


secureServer.listen(app.get('secPort'), () => {
    console.log('Secure Server listening on port ', app.get('secPort'));
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}